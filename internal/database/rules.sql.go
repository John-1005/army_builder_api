// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rules.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRule = `-- name: CreateRule :one
INSERT INTO rules (game_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, game_id, name, description, created_at, updated_at
`

type CreateRuleParams struct {
	GameID      uuid.UUID
	Name        string
	Description string
}

func (q *Queries) CreateRule(ctx context.Context, arg CreateRuleParams) (Rule, error) {
	row := q.db.QueryRow(ctx, createRule, arg.GameID, arg.Name, arg.Description)
	var i Rule
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRule = `-- name: DeleteRule :exec
DELETE FROM rules WHERE id = $1
`

func (q *Queries) DeleteRule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRule, id)
	return err
}

const getRule = `-- name: GetRule :one
SELECT id, game_id, name, description, created_at, updated_at FROM rules WHERE id = $1
`

func (q *Queries) GetRule(ctx context.Context, id uuid.UUID) (Rule, error) {
	row := q.db.QueryRow(ctx, getRule, id)
	var i Rule
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRulesForGame = `-- name: GetRulesForGame :many
SELECT id, game_id, name, description, created_at, updated_at FROM rules WHERE game_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetRulesForGame(ctx context.Context, gameID uuid.UUID) ([]Rule, error) {
	rows, err := q.db.Query(ctx, getRulesForGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rule
	for rows.Next() {
		var i Rule
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
