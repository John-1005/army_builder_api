// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ability_effects.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getAbilityEffectByID = `-- name: GetAbilityEffectByID :one
SELECT id, ability_id, stat, modifier, condition, description, version, source, created_at, updated_at
FROM ability_effects
WHERE id = $1
`

func (q *Queries) GetAbilityEffectByID(ctx context.Context, id uuid.UUID) (AbilityEffect, error) {
	row := q.db.QueryRow(ctx, getAbilityEffectByID, id)
	var i AbilityEffect
	err := row.Scan(
		&i.ID,
		&i.AbilityID,
		&i.Stat,
		&i.Modifier,
		&i.Condition,
		&i.Description,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAbilityEffectsForAbility = `-- name: GetAbilityEffectsForAbility :many
SELECT id, ability_id, stat, modifier, condition, description, version, source, created_at, updated_at
FROM ability_effects
WHERE ability_id = $1
ORDER BY stat ASC
`

func (q *Queries) GetAbilityEffectsForAbility(ctx context.Context, abilityID uuid.UUID) ([]AbilityEffect, error) {
	rows, err := q.db.Query(ctx, getAbilityEffectsForAbility, abilityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AbilityEffect
	for rows.Next() {
		var i AbilityEffect
		if err := rows.Scan(
			&i.ID,
			&i.AbilityID,
			&i.Stat,
			&i.Modifier,
			&i.Condition,
			&i.Description,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAbilityEffects = `-- name: GetAllAbilityEffects :many
SELECT id, ability_id, stat, modifier, condition, description, version, source, created_at, updated_at
FROM ability_effects
ORDER BY ability_id, stat ASC
`

func (q *Queries) GetAllAbilityEffects(ctx context.Context) ([]AbilityEffect, error) {
	rows, err := q.db.Query(ctx, getAllAbilityEffects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AbilityEffect
	for rows.Next() {
		var i AbilityEffect
		if err := rows.Scan(
			&i.ID,
			&i.AbilityID,
			&i.Stat,
			&i.Modifier,
			&i.Condition,
			&i.Description,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
