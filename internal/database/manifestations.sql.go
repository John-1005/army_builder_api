// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: manifestations.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createManifestation = `-- name: CreateManifestation :one
INSERT INTO manifestations (
  faction_id, name, points, move, health, save,
  rend, attacks, damage, banishment, summon_cost
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, faction_id, name, points, move, health, save, rend, attacks, damage, banishment, summon_cost, created_at, updated_at
`

type CreateManifestationParams struct {
	FactionID  pgtype.UUID
	Name       string
	Points     pgtype.Int4
	Move       pgtype.Text
	Health     pgtype.Int4
	Save       pgtype.Text
	Rend       pgtype.Text
	Attacks    pgtype.Text
	Damage     pgtype.Text
	Banishment pgtype.Text
	SummonCost pgtype.Text
}

func (q *Queries) CreateManifestation(ctx context.Context, arg CreateManifestationParams) (Manifestation, error) {
	row := q.db.QueryRow(ctx, createManifestation,
		arg.FactionID,
		arg.Name,
		arg.Points,
		arg.Move,
		arg.Health,
		arg.Save,
		arg.Rend,
		arg.Attacks,
		arg.Damage,
		arg.Banishment,
		arg.SummonCost,
	)
	var i Manifestation
	err := row.Scan(
		&i.ID,
		&i.FactionID,
		&i.Name,
		&i.Points,
		&i.Move,
		&i.Health,
		&i.Save,
		&i.Rend,
		&i.Attacks,
		&i.Damage,
		&i.Banishment,
		&i.SummonCost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteManifestation = `-- name: DeleteManifestation :exec
DELETE FROM manifestations WHERE id = $1
`

func (q *Queries) DeleteManifestation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteManifestation, id)
	return err
}

const getManifestationByID = `-- name: GetManifestationByID :one
SELECT id, faction_id, name, points, move, health, save, rend, attacks, damage, banishment, summon_cost, created_at, updated_at FROM manifestations WHERE id = $1
`

func (q *Queries) GetManifestationByID(ctx context.Context, id uuid.UUID) (Manifestation, error) {
	row := q.db.QueryRow(ctx, getManifestationByID, id)
	var i Manifestation
	err := row.Scan(
		&i.ID,
		&i.FactionID,
		&i.Name,
		&i.Points,
		&i.Move,
		&i.Health,
		&i.Save,
		&i.Rend,
		&i.Attacks,
		&i.Damage,
		&i.Banishment,
		&i.SummonCost,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getManifestationsForFaction = `-- name: GetManifestationsForFaction :many
SELECT id, faction_id, name, points, move, health, save, rend, attacks, damage, banishment, summon_cost, created_at, updated_at FROM manifestations
WHERE faction_id IS NULL OR faction_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetManifestationsForFaction(ctx context.Context, factionID pgtype.UUID) ([]Manifestation, error) {
	rows, err := q.db.Query(ctx, getManifestationsForFaction, factionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Manifestation
	for rows.Next() {
		var i Manifestation
		if err := rows.Scan(
			&i.ID,
			&i.FactionID,
			&i.Name,
			&i.Points,
			&i.Move,
			&i.Health,
			&i.Save,
			&i.Rend,
			&i.Attacks,
			&i.Damage,
			&i.Banishment,
			&i.SummonCost,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
