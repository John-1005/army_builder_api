// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: abilities.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAbility = `-- name: CreateAbility :one
INSERT INTO abilities (unit_id, name, description)
VALUES ($1, $2, $3)
RETURNING id, unit_id, name, description, created_at, updated_at
`

type CreateAbilityParams struct {
	UnitID      uuid.UUID
	Name        string
	Description pgtype.Text
}

func (q *Queries) CreateAbility(ctx context.Context, arg CreateAbilityParams) (Ability, error) {
	row := q.db.QueryRow(ctx, createAbility, arg.UnitID, arg.Name, arg.Description)
	var i Ability
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAbility = `-- name: DeleteAbility :exec
DELETE FROM abilities WHERE id = $1
`

func (q *Queries) DeleteAbility(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAbility, id)
	return err
}

const getAbilitiesForUnit = `-- name: GetAbilitiesForUnit :many
SELECT id, unit_id, name, description, created_at, updated_at FROM abilities WHERE unit_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetAbilitiesForUnit(ctx context.Context, unitID uuid.UUID) ([]Ability, error) {
	rows, err := q.db.Query(ctx, getAbilitiesForUnit, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ability
	for rows.Next() {
		var i Ability
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAbility = `-- name: GetAbility :one
SELECT id, unit_id, name, description, created_at, updated_at FROM abilities WHERE id = $1
`

func (q *Queries) GetAbility(ctx context.Context, id uuid.UUID) (Ability, error) {
	row := q.db.QueryRow(ctx, getAbility, id)
	var i Ability
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
