// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: units.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (faction_id, name, points, move, health, save, ward, control)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, faction_id, name, points, move, health, save, ward, control, created_at, updated_at
`

type CreateUnitParams struct {
	FactionID uuid.UUID
	Name      string
	Points    int32
	Move      pgtype.Text
	Health    pgtype.Int4
	Save      pgtype.Text
	Ward      pgtype.Text
	Control   pgtype.Int4
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRow(ctx, createUnit,
		arg.FactionID,
		arg.Name,
		arg.Points,
		arg.Move,
		arg.Health,
		arg.Save,
		arg.Ward,
		arg.Control,
	)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.FactionID,
		&i.Name,
		&i.Points,
		&i.Move,
		&i.Health,
		&i.Save,
		&i.Ward,
		&i.Control,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM units WHERE id = $1
`

func (q *Queries) DeleteUnit(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUnit, id)
	return err
}

const getUnit = `-- name: GetUnit :one
SELECT id, faction_id, name, points, move, health, save, ward, control, created_at, updated_at FROM units WHERE id = $1
`

func (q *Queries) GetUnit(ctx context.Context, id uuid.UUID) (Unit, error) {
	row := q.db.QueryRow(ctx, getUnit, id)
	var i Unit
	err := row.Scan(
		&i.ID,
		&i.FactionID,
		&i.Name,
		&i.Points,
		&i.Move,
		&i.Health,
		&i.Save,
		&i.Ward,
		&i.Control,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnits = `-- name: GetUnits :many
SELECT id, faction_id, name, points, move, health, save, ward, control, created_at, updated_at FROM units WHERE faction_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetUnits(ctx context.Context, factionID uuid.UUID) ([]Unit, error) {
	rows, err := q.db.Query(ctx, getUnits, factionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.FactionID,
			&i.Name,
			&i.Points,
			&i.Move,
			&i.Health,
			&i.Save,
			&i.Ward,
			&i.Control,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
